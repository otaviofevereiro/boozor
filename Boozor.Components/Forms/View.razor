@using Microsoft.AspNetCore.Components.Forms
@inject AppState _appState

          @*StyleContent="border:none"*@
<EditForm class="row g-3"
          @ref=_editForm
          Model=Model
          OnValidSubmit=@(e=> Execute(OnValidSubmit))
          OnInvalidSubmit=@(e=> Execute(OnInvalidSubmit))>

    <DataAnnotationsValidator />

    @*TODO// Alerts*@

    @ChildContent

    @*    <div class="form-group row">
        <div class="col-sm-10">
        <button type="submit" class="btn btn-success btn-sm">Salvar</button>
        <button type="reset" class="btn btn-primary btn-sm">Cancelar</button>
        <button type="button" class="btn btn-danger btn-sm">Deletar</button>
        </div>
        </div>*@
</EditForm>


@code {
    private EditForm _editForm;

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public EventCallback<EditContext> OnValidSubmit { get; set; }

    [Parameter]
    public EventCallback<EditContext> OnInvalidSubmit { get; set; }

    [Parameter]
    public object Model { get; set; }

    private async Task Execute(EventCallback<EditContext> eventCallback)
    {
        await Task.Yield();
        _appState.SetLoading(true);

        if (eventCallback.HasDelegate)
            await eventCallback.InvokeAsync();

        _appState.SetLoading(false);
    }
}
