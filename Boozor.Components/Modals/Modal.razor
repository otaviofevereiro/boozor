@using Microsoft.JSInterop
@inherits ModalContent;

<div id="myModal" @ref=modal class="modal @modalClass" tabindex="-1">
    <div class="modal-dialog modal-dialog-scrollable @GetModalSize()" role="document">
        @{
            base.BuildRenderTree(__builder);
        }
    </div>
</div>

@code {
    private string modalClass = "";
    private ElementReference modal;

    [Parameter]
    public ModalSize Size { get; set; } = ModalSize.Default;

    [Parameter]
    public EventCallback OnClose { get; set; }

    [Inject]
    protected IJSRuntime JSRuntime { get; set; }

    private IJSObjectReference _module;

    protected override async Task OnInitializedAsync()
    {
        _module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/modal.js");
    }

    protected override void OnInitialized()
    {
        if (Header == null)
            Header = (__builder) =>
            {
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick=Toggle></button>
            };

        base.OnInitialized();
    }

    public async Task Toggle()
    {
        await _module.InvokeVoidAsync("toggle", modal);
    }

    private string GetModalSize()
    {
        switch (Size)
        {
            case ModalSize.Small:
                return "modal-sm";
            case ModalSize.Large:
                return "modal-lg";
            case ModalSize.ExtraLarge:
                return "modal-xl";
            case ModalSize.Default:
            default:
                return string.Empty;
        }
    }
}