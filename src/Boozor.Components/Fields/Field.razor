@using System.Linq.Expressions
@using System.Reflection;
@using Microsoft.AspNetCore.Components.Forms

@typeparam TModel
@typeparam TValue

<Label Text=Label For=For Columns=Columns>
    @ChildContent
</Label>


@code {
    private PropertyInfo propertyInfo;

    [Parameter] public Expression<Func<TModel, object>> For { get; set; }
    [Parameter] public int Columns { get; set; } = 12;
    [Parameter] public string Label { get; set; }
    [CascadingParameter] public EditContext EditContext { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }
    protected TValue Value { get; set; }


    protected override void OnParametersSet()
    {
        EditContext.OnFieldChanged += OnFieldChange;
        propertyInfo = GetPropertyInfo(For);
        Value = (TValue)propertyInfo.GetValue(EditContext.Model);

        base.OnParametersSet();
    }

    public void OnFieldChange(object obj, FieldChangedEventArgs e)
    {
        if (e.FieldIdentifier.FieldName == propertyInfo.Name)
            Value = (TValue)propertyInfo.GetValue(EditContext.Model);
    }

    public void Set(string value)
    {
        propertyInfo.SetValue(EditContext.Model, value);
    }

    //TODO:
    private PropertyInfo GetPropertyInfo<TType, TReturn>(Expression<Func<TType, TReturn>> property)
    {
        LambdaExpression lambda = property;
        var memberExpression = lambda.Body is UnaryExpression expression
        ? (MemberExpression)expression.Operand
        : (MemberExpression)lambda.Body;

        return (PropertyInfo)memberExpression.Member;
    }
}
