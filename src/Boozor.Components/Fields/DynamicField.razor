@using System.Linq.Expressions
@using System.Reflection;
@using Microsoft.AspNetCore.Components.Forms
@typeparam TModel

<div class="col-md-{@Columns} col-sm-12">
    <label class="form-label">
        @Label
    </label>
    <InputText class="form-control" @bind-Value:get=value @bind-Value:set=Set />
    <ValidationMessage For="(()=> value)" />
</div>


@code {
    private PropertyInfo propertyInfo;

    [Parameter] public Expression<Func<TModel, object>> Value { get; set; }
    [Parameter] public int Columns { get; set; } = 12;
    [Parameter] public string Label { get; set; }
    [CascadingParameter] public EditContext EditContext { get; set; }

    private string value;


    protected override void OnParametersSet()
    {
        EditContext.OnFieldChanged += OnFieldChange;
        propertyInfo = GetPropertyInfo(Value);
        Label = EnsureLabel(Label);

        base.OnParametersSet();
    }

    public void OnFieldChange(object obj, FieldChangedEventArgs e)
    {
        if (e.FieldIdentifier.FieldName == propertyInfo.Name)
            value = (string)propertyInfo.GetValue(EditContext.Model);
    }

    public void Set(string value)
    {
        propertyInfo.SetValue(EditContext.Model, value);
    }


    private PropertyInfo GetPropertyInfo<TType, TReturn>(Expression<Func<TType, TReturn>> property)
    {
        LambdaExpression lambda = property;
        var memberExpression = lambda.Body is UnaryExpression expression
        ? (MemberExpression)expression.Operand
        : (MemberExpression)lambda.Body;

        return (PropertyInfo)memberExpression.Member;
    }

    private string EnsureLabel(string text)
    {
        if (!string.IsNullOrEmpty(text))
            return text;

        var displayAttribute = propertyInfo.GetCustomAttributes(typeof(System.ComponentModel.DataAnnotations.DisplayAttribute),
        true)
        .FirstOrDefault() as System.ComponentModel.DataAnnotations.DisplayAttribute;

        if (displayAttribute == null || string.IsNullOrEmpty(displayAttribute.Name))
            return propertyInfo.Name;
        else
            return displayAttribute.Name;
    }

}
