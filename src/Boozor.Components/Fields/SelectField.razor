@using Microsoft.AspNetCore.Components.Forms
@using System.Linq.Expressions;
@using System.Reflection;
@using Boozor.Shared;
@inherits Field<TModel, Relation<TItem>>
@typeparam TModel
@typeparam TItem where TItem : IEntity

@{
    base.BuildRenderTree(__builder);
}

@code {

    [Parameter] public IEnumerable<TItem> Items { get; set; }
    [Parameter] public Expression<Func<TItem, object>> DisplayFor { get; set; }
    private PropertyInfo displayPropertyInfo;

    protected override void OnParametersSet()
    {
        displayPropertyInfo = DisplayFor.GetPropertyInfo();
        base.OnParametersSet();
    }

    protected override RenderFragment ChildContent => __builder =>
    {
        <div class="col-md-@Columns col-sm-12">
            <label class="form-label">
                @Label
            </label>
            <InputSelect @bind-Value=selectedItem @onchange="OnChanged"
            readonly=@ReadOnly class="form-control">

                @foreach (var item in Items)
                {
                    <option value="@item">@displayPropertyInfo.GetValue(item)</option>
                }
            </InputSelect>
        </div>
    };

    string selectedItem;

    private void OnChanged(ChangeEventArgs args)
    {
        
    }
}
