@using Microsoft.AspNetCore.Components.Forms
@using System.Linq.Expressions;
@using System.Reflection;
@using Boozor.Shared;
@inherits Field<Relation<TItem>>
@typeparam TItem where TItem : IEntity

@{
    base.BuildRenderTree(__builder);
}

@code {
    [Parameter] public IEnumerable<TItem> Items { get; set; }
    [Parameter] public Expression<Func<TItem, object>> DisplayFor { get; set; }
    private PropertyInfo displayPropertyInfo;
    private string _value => GetValue().Id;

    protected override void OnParametersSet()
    {
        displayPropertyInfo = DisplayFor.GetPropertyInfo();
        base.OnParametersSet();
    }

    protected override RenderFragment ChildContent => __builder =>
    {
        <div class="col-md-@Columns col-sm-12">
            <label class="form-label">
                @Label
            </label>
            <InputSelect Value="@_value" @onchange="((e) => OnValueChanged(e))" AdditionalAttributes="AdditionalAttributes">
                @foreach (var item in Items)
                {
                    <option value="@item.Id">@displayPropertyInfo.GetValue(item)</option>
                }
            </InputSelect>
        </div>
    };

    private void OnValueChanged(ChangeEventArgs value)
    {
        var parameter = Expression.Parameter(typeof(TItem), "x");
        var equalExpression = Expression.Equal(For, Expression.Constant(value.Value?.ToString()));
        var body = Expression.Lambda<Func<TItem, bool>>(equalExpression, parameter);
        var item = Items.FirstOrDefault(body.Compile());

        Set(new(item));
    }

    protected override IEnumerable<KeyValuePair<string, object>> CustomAttributes()
    {
        yield return new("class", "form-select");
    }
}
