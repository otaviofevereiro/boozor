@using Microsoft.AspNetCore.Components.Forms
@using Boozor.Components.Modals
@inject AppState _appState

<div class="col-md-@Columns col-sm-12">
    <EditForm Model=Model OnValidSubmit=@(async e => await Execute(OnValidSubmit)) OnInvalidSubmit=@(async e => await
        Execute(OnInvalidSubmit))>

        <ModalContent Title=@Title StyleContent="border:none">

            <Body>
                <DataAnnotationsValidator />
                <div class="row g-3">
                    @*TODO: <ValidationSummary /> *@
                    @ChildContent
                </div>
            </Body>
            <Footer>
                <button type="button" class="btn btn-danger btn-sm" @onclick="Delete">Excluir</button>
                <button type="submit" class="btn btn-success btn-sm">Salvar</button>
            </Footer>
        </ModalContent>
    </EditForm>
</div>

@code {
    private Message _message = new();

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public int Columns { get; set; } = 12;

    [Parameter]
    public EventCallback<EditContext> OnValidSubmit { get; set; }

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public EventCallback<EditContext> OnInvalidSubmit { get; set; }

    [Parameter]
    public EventCallback<EditContext> OnDelete { get; set; }

    [Parameter]
    public object Model { get; set; }

    private async Task Execute(EventCallback<EditContext> eventCallback)
    {
        await Task.Yield();
        _appState.Loading();

        if (eventCallback.HasDelegate)
            await eventCallback.InvokeAsync();

        _appState.Loading();
    }

    private void Delete()
    {
        _appState.Confirmation("Confirma a exclusão?",
        "Excluir registro",
        onOk: async () => await Execute(OnDelete));
    }
}
