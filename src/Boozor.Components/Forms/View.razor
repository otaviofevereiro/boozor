@using Microsoft.AspNetCore.Components.Forms
@using Boozor.Shared
@inject AppState _appState

@typeparam TEntity where TEntity : IEntity

<div class="col-md-@Columns col-sm-12">
    <EditForm Model=Model OnValidSubmit=@SubmitAsync>
        <EntityServer @ref=entityServer />
        <ModalContent Title=@Title StyleContent="border:none">

            <Body>
                <DataAnnotationsValidator />
                <div class="row g-3">
                    @*TODO: <ValidationSummary /> *@
                    @ChildContent
                </div>
            </Body>
            <Footer>
                <button type="button" class="btn btn-danger btn-sm" @onclick="Delete">Excluir</button>
                <button type="submit" class="btn btn-success btn-sm">Salvar</button>
            </Footer>
        </ModalContent>
    </EditForm>
</div>

@code {

    EntityServer entityServer;

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public int Columns { get; set; } = 12;

    [Parameter]
    public string Title { get; set; };

    [Parameter]
    public TEntity Model { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (string.IsNullOrEmpty(Title))
            Title = GetTitle();
        
    }



    private async Task Execute(Func<Task> func)
    {
        await Task.Yield();
        _appState.Loading();

        await func();

        _appState.Loading();
    }

    private async void SubmitAsync()
    {
        await entityServer.SubmitAsync(Model);
    }

    private void Delete()
    {
        _appState.Confirmation("Confirma a exclusão?",
        "Excluir registro",
        onOk: async () => await Task.CompletedTask);
    }

    private string GetTitle()
    {
        var titleAttribute = (TitleAttribute)Attribute.GetCustomAttribute(typeof(TEntity), typeof(TitleAttribute));

        if (titleAttribute is not null)
            return titleAttribute.Title;
    }

}
