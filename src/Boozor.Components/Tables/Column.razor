@using System.Linq.Expressions
@using Microsoft.AspNetCore.Components.Forms;

@typeparam TModel

@if (@Item == null)
{
    <th @onclick="OrderAsync">@GetTitle()</th>
}
else
{
    <td>
    @if (_value is bool value)
        {
            <input type="checkbox" class="form-check-input" @bind=value readonly />
        }
        else
        {
            @FormatValue()
        }
    </td>
}


@code {
    [Parameter]
    public string Format { get; set; } = "dd/MM/yyyy";

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public Expression<Func<TModel, object>> For { get; set; }

    [CascadingParameter]
    public TModel Item { get; set; }

    [CascadingParameter]
    public DataTable<TModel> DataTable { get; set; }

    private Func<TModel, object> _valueFunc;
    private OrderType _orderType = OrderType.None;
    private object _value;

    protected override void OnParametersSet()
    {
        _valueFunc = For.Compile();

        if (Item is not null)
            _value = _valueFunc?.Invoke(Item);
        base.OnParametersSet();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    private string FormatValue()
    {
        if (_value == null)
            return string.Empty;

        if (string.IsNullOrEmpty(Format))
            return _value.ToString();

        var dateTime = _value as DateTime?;

        if (dateTime.HasValue)
            return dateTime.Value.ToString(Format);

        return _value.ToString();
    }

    public object GetTitle()
    {
        if (!string.IsNullOrEmpty(Title))
            return Title;

        var memberExpression = GetMemberExpression();
        var property = typeof(TModel).GetProperty(memberExpression.Member.Name);

        var displayAttribute = property?.GetCustomAttributes(typeof(System.ComponentModel.DataAnnotations.DisplayAttribute),
        true)
        ?.FirstOrDefault() as System.ComponentModel.DataAnnotations.DisplayAttribute;

        if (displayAttribute == null || string.IsNullOrEmpty(displayAttribute.Name))
            return memberExpression.Member.Name;
        else
            return displayAttribute.Name;
    }

    //TODO:refactor
    private MemberExpression GetMemberExpression()
    {
        var memberExpression = For.Body as MemberExpression;

        if (memberExpression == null)
        {
            var unaryExpression = For.Body as UnaryExpression;
            memberExpression = unaryExpression.Operand as MemberExpression;
        }

        return memberExpression;
    }

    private async Task OrderAsync()
    {
        _orderType = await DataTable.Order(_valueFunc, _orderType);
    }

}
